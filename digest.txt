Directory structure:
└── robo_maestro/
    ├── package.xml
    ├── setup.cfg
    ├── setup.py
    ├── config/
    │   └── planner.yaml
    ├── launch/
    │   └── moveit_cmd.launch.py
    ├── resource/
    │   └── robo_maestro
    ├── robo_maestro/
    │   ├── __init__.py
    │   └── moveit_cmd.py
    └── test/
        ├── test_copyright.py
        ├── test_flake8.py
        └── test_pep257.py

================================================
FILE: package.xml
================================================
<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>robo_maestro</name>
  <version>0.0.0</version>
  <description>robo_maestro: Python Package to interact with Paris Robotics Lab's UR5</description>
  <maintainer email="paul.pacaud@inria.fr">Paul Pacaud</maintainer>
  <license>Apache-2.0</license>

  <test_depend>ament_copyright</test_depend>
  <test_depend>ament_flake8</test_depend>
  <test_depend>ament_pep257</test_depend>
  <test_depend>python3-pytest</test_depend>

  <export>
    <build_type>ament_python</build_type>
  </export>
</package>



================================================
FILE: setup.cfg
================================================
[develop]
script_dir=$base/lib/robo_maestro
[install]
install_scripts=$base/lib/robo_maestro



================================================
FILE: setup.py
================================================
from setuptools import find_packages, setup
import os
from glob import glob
package_name = 'robo_maestro'

setup(
    name="robo_maestro",
    version='0.0.0',
    packages=find_packages(exclude=['test']),
    # data_files=[
    #     ('share/ament_index/resource_index/packages',
    #         ['resource/' + package_name]),
    #     ('share/' + package_name, ['package.xml']),
    # ],
    data_files=[
        ('share/ament_index/resource_index/packages',
         ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name, 'launch'), glob(os.path.join('launch', '*launch.[pxy][yma]*'))),
        (os.path.join('share', package_name, 'config'), glob(os.path.join('config', '*.[pxy][yma]*'))),
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='Paul Pacaud',
    maintainer_email='paul.pacaud@inria.fr',
    description='robo_maestro: Python Package to interact with Paris Robotics Lab UR5',
    license='Apache-2.0',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'moveit_cmd = robo_maestro.moveit_cmd:main'
        ],
    },
)



================================================
FILE: config/planner.yaml
================================================
planning_scene_monitor_options:
  name: "planning_scene_monitor"
  robot_description: "robot_description"
  joint_state_topic: "/joint_states"
  attached_collision_object_topic: "/moveit_cpp/planning_scene_monitor"
  publish_planning_scene_topic: "/moveit_cpp/publish_planning_scene"
  monitored_planning_scene_topic: "/moveit_cpp/monitored_planning_scene"
  wait_for_initial_state_timeout: 10.0

planning_pipelines:
  pipeline_names: ["ompl", "pilz_industrial_motion_planner", "chomp"]

plan_request_params:
  planning_attempts: 1
  planning_pipeline: ompl
  max_velocity_scaling_factor: 1.0
  max_acceleration_scaling_factor: 1.0

ompl_rrtc:  # Namespace for individual plan request
  plan_request_params:  # PlanRequestParameters similar to the ones that are used by the single pipeline planning of moveit_cpp
    planning_attempts: 1  # Number of attempts the planning pipeline tries to solve a given motion planning problem
    planning_pipeline: ompl  # Name of the pipeline that is being used
    planner_id: "RRTConnectkConfigDefault"  # Name of the specific planner to be used by the pipeline
    max_velocity_scaling_factor: 1.0  # Velocity scaling parameter for the trajectory generation algorithm that is called (if configured) after the path planning
    max_acceleration_scaling_factor: 1.0  # Acceleration scaling parameter for the trajectory generation algorithm that is called (if configured) after the path planning
    planning_time: 1.0  # Time budget for the motion plan request. If the planning problem cannot be solved within this time, an empty solution with error code is returned

pilz_lin:
  plan_request_params:
    planning_attempts: 1
    planning_pipeline: pilz_industrial_motion_planner
    planner_id: "PTP"
    max_velocity_scaling_factor: 1.0
    max_acceleration_scaling_factor: 1.0
    planning_time: 0.8

chomp_planner:
  plan_request_params:
    planning_attempts: 1
    planning_pipeline: chomp
    max_velocity_scaling_factor: 1.0
    max_acceleration_scaling_factor: 1.0
    planning_time: 1.5



================================================
FILE: launch/moveit_cmd.launch.py
================================================
"""
A launch file for running the motion planning python api tutorial
"""
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument,OpaqueFunction
from launch.substitutions import LaunchConfiguration
from moveit_configs_utils import MoveItConfigsBuilder
from ament_index_python.packages import get_package_share_directory

def launch_setup(context):
    use_sim_time = LaunchConfiguration('use_sim_time', default=True)
    # Here we built the moveit_config object
    # This object is used to load the robot description and the planner
    moveit_config = (
        MoveItConfigsBuilder(robot_name="mantis", package_name="prl_ur5_moveit")
        .robot_description(file_path="config/mantis.urdf.xacro")
        
        .moveit_cpp(
            file_path=get_package_share_directory("robo_maestro")
            + "/config/planner.yaml"
        )
        .to_moveit_configs()
    )

    # Here we launch the executable
    # This executable is the moveit_cmd.py file warn to specify if the robot is in simulation or not via the use_sim_time parameter
    moveit_py_node = Node(
        name="moveit_cmd",
        package="robo_maestro",
        executable="moveit_cmd",
        output="both",
        parameters=[moveit_config.to_dict(), {'use_sim_time': use_sim_time}],

    )

    return [
        moveit_py_node,
    ]

def generate_launch_description():
    declared_arguments = []
    declared_arguments.append(
        DeclareLaunchArgument(
            "use_sim_time",
            default_value="true",
            description="Use simulation (Gazebo) clock if true",
        )
    )
    return LaunchDescription(declared_arguments + [OpaqueFunction(function=launch_setup)])



================================================
FILE: resource/robo_maestro
================================================



================================================
FILE: robo_maestro/__init__.py
================================================



================================================
FILE: robo_maestro/moveit_cmd.py
================================================
#!/usr/bin/env python3
"""
A script to outline the fundamentals of the moveit_py motion planning API.
"""

import time

# generic ros libraries
import rclpy
from rclpy.logging import get_logger

# moveit python library
from moveit.core.robot_state import RobotState
from moveit.planning import (
    MoveItPy,
    MultiPipelinePlanRequestParameters,
)
import numpy as np

# A simple function to plan and execute a motion

def plan_and_execute(
    robot,
    planning_component,
    logger,
    single_plan_parameters=None,
    multi_plan_parameters=None,
    sleep_time=0.0,
):
    """Helper function to plan and execute a motion."""
    # plan to goal
    logger.info("Planning trajectory")
    if multi_plan_parameters is not None:
        # multiple pipelines are used to plan the trajectory
        # the planning component will use the first pipeline that returns a valid trajectory
        plan_result = planning_component.plan(
            multi_plan_parameters=multi_plan_parameters
        )
    elif single_plan_parameters is not None:
        # single pipeline is used to plan the trajectory
        # the planning component will use the pipeline specified in the parameters
        plan_result = planning_component.plan(
            single_plan_parameters=single_plan_parameters
        )
    else:
        # no pipeline is specified, the planning component will use the default pipeline set in the srdf
        plan_result = planning_component.plan()

    # execute the plan if it is valid trajectory
    if plan_result:
        logger.info("Executing plan")
        robot_trajectory = plan_result.trajectory
        robot.execute(robot_trajectory, controllers=[])
    else:
        logger.error("Planning failed")

    time.sleep(sleep_time)


def main():

    ###################################################################
    # MoveItPy Setup
    ###################################################################
    rclpy.init()
    logger = get_logger("moveit_py.right_pose_goal")

    # instantiate MoveItPy instance and get planning component
    ur = MoveItPy(node_name="moveit_py")
    left_arm = ur.get_planning_component("left_arm")
    right_arm = ur.get_planning_component("right_arm")
    logger.info("MoveItPy instance created")

    ###########################################################################
    # Plan 1 - set states with predefined string
    ###########################################################################

    # set plan start state using predefined state
    # left__arm.set_start_state(configuration_name="current") this allow to set the start state to a predefined state
    left_arm.set_start_state_to_current_state()
    right_arm.set_start_state_to_current_state()

    # set pose goal using predefined state (prefined in the moveit package)
    left_arm.set_goal_state(configuration_name="work")
    right_arm.set_goal_state(configuration_name="work")

    # plan to goal
    plan_and_execute(ur, left_arm, logger, sleep_time=3.0)
    plan_and_execute(ur, right_arm, logger, sleep_time=3.0)

    ###########################################################################
    # Plan 2 - set goal state with RobotState object
    ###########################################################################

    # instantiate a RobotState instance using the current robot model
    # robotstate is a class that allows to set the state of the robot
    robot_model = ur.get_robot_model()
    robot_state = RobotState(robot_model)

    # Define the joint values for the robot state (in the same order as the joint names in the robot model)
    joint_values = np.array([
        0.0,        # shoulder_pan_joint
        -1.57,      # shoulder_lift_joint
        0.0,       # elbow_joint
        -1.57,      # wrist_1_joint
        0.0,      # wrist_2_joint
        0.0         # wrist_3_joint
    ])

    # Set the joint values for the left and right arms
    robot_state.set_joint_group_positions("left_arm", joint_values)
    robot_state.set_joint_group_positions("right_arm", joint_values)

    # Set goal state using RobotState object
    left_arm.set_goal_state(robot_state=robot_state)
    right_arm.set_goal_state(robot_state=robot_state)

    # pan to goal
    plan_and_execute(ur, left_arm, logger, sleep_time=3.0)
    plan_and_execute(ur, right_arm, logger, sleep_time=3.0)

    ###########################################################################
    # Plan 3 - set goal state with PoseStamped message
    ###########################################################################

    # set plan start state to current state
    right_arm.set_start_state_to_current_state()
    left_arm.set_start_state_to_current_state()

    # set pose goal with PoseStamped message
    from geometry_msgs.msg import PoseStamped

    right_pose_goal = PoseStamped()
    # set the reference frame for the pose
    right_pose_goal.header.frame_id = "base_link" 
    # set the pose orientation and position
    # the orientation is set using quaternions
    right_pose_goal.pose.orientation.w = 0.0
    right_pose_goal.pose.orientation.x = 1.0
    right_pose_goal.pose.orientation.y = 0.0
    right_pose_goal.pose.orientation.z = 0.0
    # the position is set using x, y, z coordinates
    # the position is set relative to the reference frame
    right_pose_goal.pose.position.x = 0.0
    right_pose_goal.pose.position.y = -0.191
    right_pose_goal.pose.position.z = 1.001
    # set the goal state using the pose goal
    # the pose_link is the link to which the pose is relative to
    right_arm.set_goal_state(pose_stamped_msg=right_pose_goal, pose_link="right_tool0")

    # Same for the left arm
    left_pose_goal = PoseStamped()
    left_pose_goal.header.frame_id = "base_link"
    left_pose_goal.pose.orientation.w = 0.0
    left_pose_goal.pose.orientation.x = 0.5
    left_pose_goal.pose.orientation.y = 0.0
    left_pose_goal.pose.orientation.z = 0.0
    left_pose_goal.pose.position.x = 0.0    
    left_pose_goal.pose.position.y = 0.191
    left_pose_goal.pose.position.z = 1.001
    left_arm.set_goal_state(pose_stamped_msg=left_pose_goal, pose_link="left_tool0")

    # plan to goal
    plan_and_execute(ur, right_arm, logger, sleep_time=3.0)
    plan_and_execute(ur, left_arm, logger, sleep_time=3.0)

    ###########################################################################
    # Plan 4 - set goal state with constraints
    ###########################################################################

    # set plan start state to current state
    left_arm.set_start_state_to_current_state()

    # set constraints message
    from moveit.core.kinematic_constraints import construct_joint_constraint

    # set the joint values which you want to constrain for the goal state
    # you just need to set the values of the joints you want to constrain however the joint need to be in the left or right group
    joint_values = { 
        "left_shoulder_pan_joint": 0.0,
        "left_shoulder_lift_joint": -1.57,
        "left_elbow_joint": 0.0,
        "left_wrist_1_joint": -1.57,
        "left_wrist_2_joint": 0.0,
        "left_wrist_3_joint": 0.0,
        "right_shoulder_pan_joint": 0.0,
        "right_shoulder_lift_joint": -1.57,
        "right_elbow_joint": 0.0,
        "right_wrist_1_joint": -1.57,
        "right_wrist_2_joint": 0.0,
        "right_wrist_3_joint": 0.0,
    }
    # set the joint values for the robot state
    robot_state.joint_positions = joint_values
    # construct the joint constraint for the left and right arms by using the joint model group stored in the robot model
    # the joint model group is the group of joints that are used to control the left and right arms so when you get the joint value for a define joint model group
    # you need to have set the joint values of each joint in the group
    left_joint_constraint = construct_joint_constraint(
        robot_state=robot_state,
        joint_model_group=ur.get_robot_model().get_joint_model_group("left_arm"),
    )
    right_joint_constraint = construct_joint_constraint(
        robot_state=robot_state,
        joint_model_group=ur.get_robot_model().get_joint_model_group("right_arm"),
    )
    # set the goal state using the joint constraint
    left_arm.set_goal_state(motion_plan_constraints=[left_joint_constraint])
    right_arm.set_goal_state(motion_plan_constraints=[right_joint_constraint])

    # plan to goal
    plan_and_execute(ur, left_arm, logger, sleep_time=3.0)
    plan_and_execute(ur, right_arm, logger, sleep_time=3.0)

    ###########################################################################
    # Plan 5 - Planning with Multiple Pipelines simultaneously
    ###########################################################################

    # set plan start state to current state
    left_arm.set_start_state_to_current_state()
    right_arm.set_start_state_to_current_state()

    # set pose goal with PoseStamped message
    left_arm.set_goal_state(configuration_name="work")
    right_arm.set_goal_state(configuration_name="work")

    # initialise multi-pipeline plan request parameters
    multi_pipeline_plan_request_params = MultiPipelinePlanRequestParameters(
        ur, ["ompl_rrtc", "pilz_lin", "chomp_planner"]
    )

    # plan to goal with multiple pipelines
    # the planning component will use the first pipeline that returns a valid trajectory you can also use another criteria to select the pipeline
    plan_and_execute(
        ur,
        left_arm,
        logger,
        multi_plan_parameters=multi_pipeline_plan_request_params,
        sleep_time=3.0,
    )
    plan_and_execute(
        ur,
        right_arm,
        logger,
        multi_plan_parameters=multi_pipeline_plan_request_params,
        sleep_time=3.0,
    )

if __name__ == "__main__":
    main()


================================================
FILE: test/test_copyright.py
================================================
# Copyright 2015 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ament_copyright.main import main
import pytest


# Remove the `skip` decorator once the source file(s) have a copyright header
@pytest.mark.skip(reason='No copyright header has been placed in the generated source file.')
@pytest.mark.copyright
@pytest.mark.linter
def test_copyright():
    rc = main(argv=['.', 'test'])
    assert rc == 0, 'Found errors'



================================================
FILE: test/test_flake8.py
================================================
# Copyright 2017 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ament_flake8.main import main_with_errors
import pytest


@pytest.mark.flake8
@pytest.mark.linter
def test_flake8():
    rc, errors = main_with_errors(argv=[])
    assert rc == 0, \
        'Found %d code style errors / warnings:\n' % len(errors) + \
        '\n'.join(errors)



================================================
FILE: test/test_pep257.py
================================================
# Copyright 2015 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ament_pep257.main import main
import pytest


@pytest.mark.linter
@pytest.mark.pep257
def test_pep257():
    rc = main(argv=['.', 'test'])
    assert rc == 0, 'Found code style errors / warnings'


